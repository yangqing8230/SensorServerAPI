syntax = "proto3";

package zb.sensor.tdoa;   //c++:对应于zb::sensor::tdoa命名空间

option java_multiple_files = true;
option java_package = "com.zb.sensor.tdoa";
option java_outer_classname = "TDOAProto";

import "sensor.proto";  //依赖sensor.proto的消息定义

//目标的信号特征(待定位的目标)
message TargetSignal {
  double center_freq = 1; //中心频率,单位 Hz
  double bandwidth = 2;   //信号带宽,单位 Hz
  double power = 3;       //允许节点上传数据的最低电平要求,参与任务的节点设备在采集时,只有高于该值才会将采集的数据上传到中心
  int32 attenuation_gain = 4; //采集该信号时的增益衰减,[-30, 20],对于小信号应是开启增益
  int32 antenna = 5;      //天线选择[0,1]
}

message TDOAOption{
  bool enable_spectrum = 1;   //频谱输出
  bool enable_iq = 2;         //iq输出
  bool enable_coorelation = 3;  //互相关结果输出
}

//tdoa任务参数
message TDOAParams {
  repeated TargetSignal target_signals  = 1;  //要定位的目标
  Timestamp sync_acquire_time = 2;          //同步采集起始时刻
  uint32 interval_msec = 3;                 //采集的时间间隔,单位 ms
  TDOAOption option = 4;
}

message TDOAIndex{
  uint32 position_idx = 1;  //属于第几次定位
  uint32 signal_idx = 2;    //第几个信号
}

//启动tdoa任务请求
message StartTDOARequest{
  repeated NodeDevice task_runner = 1;  //参与任务的单元
  TDOAParams task_parms = 2;          //任务参数
}

//水平的方位信息
message GeogCoord {
  double ln = 1;  //经度,单位 度
  double lt = 2;  //纬度,单位 度
}

//tdoa错误码
enum TDOAError {
	TDOA_ERR_NONE = 0;          //无错误
  TDOA_ERR_LACK_QUALIFIED_BLOCK = 1;  //缺少合格的数据块
	TDOA_ERR_CORRELATE = 2;     //互相关错误
	TDOA_ERR_POSITION = 3;      //定位错误
}

//数据块摘要
message BlockBrief{
  NodeDevice block_source = 1;      //block的来源
  GeogCoord acquire_position = 2; //位置
  Timestamp acquire_time = 3;     //时刻
  bool uploaded_data = 4;              //是否有数据
  float peak_level = 5;
}

//两站的互相关
message Correlation{
  NodeDevice block_source = 1;   //block的来源
  int64 time_offset = 2;      //时间戳偏移, 单位 纳秒
  double sensor_distance = 3; //两个传感器之间的距离，单位 米
  double signal_arrival_difference = 4; //信号到达的距离差,单位 米（互相关解算的结果）
}

//一个定位批次互相关信息
message BatchCorrelation{
  NodeDevice ref_block = 1;   //参考
  repeated Correlation correlations = 2;  //所有互相关的结果
}

//目标的定位信息
message TargetPosition{
  enum ResolveMethod{
    DIRECTION = 0;          //双站测向
    FAST_POSITION = 1;      //快速定位
    PRECISE_POSITION = 2;   //精确定位
  }
  ResolveMethod mtd = 1;                  //解算方式
  repeated GeogCoord target_position = 2; //目标位置,解的可能个数[0,2]
}

//tdoa过程数据(各种迹线)
message TDOATrace {
  enum TraceType {
    TDOA_SPECTRUM = 0;  //频谱
    TDOA_IQ = 1;	      //iq
    TDOA_CORRELATE = 2;	//相关线
  }
  TraceType type = 1;   //迹线类型
  repeated NodeDevice result_from = 2; //数据来源
  repeated float trace_data = 3;     //迹线数据
}

//TDOA任务产生的数据
message TDOAProduction{
  TDOAIndex index = 1;                      //索引
  TDOAError error_code = 2;                 //错误码
  repeated BlockBrief block_brief = 3;      //数据块摘要
  repeated TDOATrace details = 4;           //过程迹线（频谱、IQ、互相关）
  BatchCorrelation correlation_info = 5;    //互相关结果
  TargetPosition position_info = 6;         //定位结果
}

//tdoa 数据传输状态
message SensorAcquireProgress{
  NodeDevice sensor = 1;    //节点设备id
  TDOAIndex last_received = 2;  //收到的最新索引
}

//tdoa任务的进展情况
message TDOAProgress{
  repeated SensorAcquireProgress progress = 1;
}

//tdoa API
service TDOAService {
  rpc Start(StartTDOARequest) returns (TaskAccount) {}  //启动任务
  rpc GetProduction(TaskId) returns (stream TDOAProduction) {}  //获取任务数据
  rpc GetTaskProgress(TaskId) returns (TDOAProgress) {}         //获取任务各节点的数据传输进度
  rpc Stop(TaskId) returns (NodeReply) {}               //停止任务
}